import React from 'react';

/**
 * Utilitaires pour le chargement des PDFs compatible avec IDM et autres gestionnaires de t√©l√©chargement
 */

/**
 * Charge un PDF en tant que Blob pour √©viter l'interception par IDM
 * @param url URL du PDF √† charger
 * @returns Blob URL du PDF ou l'URL originale en cas d'√©chec
 */
export const loadPdfAsBlob = async (url: string): Promise<string> => {
  try {
    console.log('üîÑ Tentative de chargement PDF comme Blob pour √©viter IDM:', url);
    
    // Fetch avec headers sp√©ciaux pour √©viter l'interception
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/pdf, application/octet-stream, */*',
        'Content-Type': 'application/pdf',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        // Headers pour √©viter l'interception par les gestionnaires de t√©l√©chargement
        'X-Requested-With': 'XMLHttpRequest',
        'X-PDF-Viewer': 'inline'
      },
      // D√©sactiver le cache pour √©viter les probl√®mes
      cache: 'no-cache'
    });

    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
    }

    console.log('‚úÖ R√©ponse PDF re√ßue, conversion en Blob...');
    
    // Convertir en blob
    const blob = await response.blob();
    
    // V√©rifier que c'est bien un PDF
    if (!blob.type.includes('pdf') && !blob.type.includes('octet-stream')) {
      console.warn('‚ö†Ô∏è Type MIME suspect:', blob.type);
    }
    
    // Cr√©er une URL blob
    const blobUrl = URL.createObjectURL(new Blob([blob], { type: 'application/pdf' }));
    
    console.log('‚úÖ PDF charg√© comme Blob URL:', blobUrl);
    return blobUrl;
    
  } catch (error) {
    console.error('‚ùå √âchec du chargement comme Blob, utilisation URL directe:', error);
    return url; // Fallback sur l'URL originale
  }
};

/**
 * Nettoie une Blob URL pour √©viter les fuites m√©moire
 * @param blobUrl URL blob √† nettoyer
 */
export const cleanupBlobUrl = (blobUrl: string): void => {
  if (blobUrl.startsWith('blob:')) {
    URL.revokeObjectURL(blobUrl);
    console.log('üßπ Blob URL nettoy√©e:', blobUrl);
  }
};

/**
 * D√©tecte si un gestionnaire de t√©l√©chargement interf√®re avec les PDFs
 * @returns true si un gestionnaire de t√©l√©chargement est d√©tect√©
 */
export const detectDownloadManager = (): boolean => {
  // D√©tection d'IDM
  const hasIDM = !!(window as any).external && 
                 typeof (window as any).external.AddUrlToList === 'function';
  
  // D√©tection d'autres gestionnaires communs
  const hasOtherManagers = !!(window as any).downloadManager || 
                          !!(window as any).fdm || 
                          !!(window as any).eagleget;
  
  const hasDownloadManager = hasIDM || hasOtherManagers;
  
  if (hasDownloadManager) {
    console.log('üîç Gestionnaire de t√©l√©chargement d√©tect√©, utilisation du mode Blob');
  }
  
  return hasDownloadManager;
};

/**
 * Configuration PDF.js optimis√©e pour √©viter les conflits avec IDM
 */
export const getPdfJsConfig = (url: string) => ({
  url,
  // D√©sactiver le streaming pour √©viter les probl√®mes de r√©seau
  disableStream: true,
  disableAutoFetch: true,
  
  // Configuration avanc√©e pour la compatibilit√©
  verbosity: 0, // R√©duire les logs
  
  // Headers personnalis√©s
  httpHeaders: {
    'Accept': 'application/pdf, application/octet-stream, */*',
    'Cache-Control': 'no-cache',
    'X-Requested-With': 'XMLHttpRequest',
    'X-PDF-Viewer': 'inline'
  },
  
  // Configuration des cartes de caract√®res
  cMapUrl: 'https://unpkg.com/pdfjs-dist@4.3.93/cmaps/',
  cMapPacked: true,
  
  // Am√©liorer les performances
  useWorkerFetch: false,
  isEvalSupported: false,
  maxImageSize: 16777216, // 16MB
  
  // Gestion d'erreur personnalis√©e
  onError: (error: Error) => {
    console.error('Erreur PDF.js:', error);
  },
  
  onProgress: (progressData: any) => {
    if (progressData.total > 0) {
      const percent = (progressData.loaded / progressData.total) * 100;
      console.log(`üì• Chargement PDF: ${percent.toFixed(1)}%`);
    }
  }
});

/**
 * Hook personnalis√© pour charger un PDF de mani√®re compatible
 */
export const usePdfLoader = (initialUrl: string) => {
  const [pdfUrl, setPdfUrl] = React.useState<string>(initialUrl);
  const [isLoading, setIsLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);
  
  const loadPdf = React.useCallback(async (url: string) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // D√©tecter si on a besoin du mode Blob
      const needsBlobMode = detectDownloadManager();
      
      let finalUrl = url;
      if (needsBlobMode) {
        finalUrl = await loadPdfAsBlob(url);
      }
      
      // Nettoyer l'ancienne URL si c'√©tait une blob
      if (pdfUrl !== initialUrl) {
        cleanupBlobUrl(pdfUrl);
      }
      
      setPdfUrl(finalUrl);
    } catch (error) {
      console.error('Erreur lors du chargement PDF:', error);
      setError(error instanceof Error ? error.message : 'Erreur inconnue');
      setPdfUrl(url); // Fallback sur l'URL originale
    } finally {
      setIsLoading(false);
    }
  }, [pdfUrl, initialUrl]);
  
  // Charger le PDF au montage du composant
  React.useEffect(() => {
    if (initialUrl) {
      loadPdf(initialUrl);
    }
  }, [initialUrl, loadPdf]);
  
  // Nettoyer les blob URLs au d√©montage
  React.useEffect(() => {
    return () => {
      if (pdfUrl !== initialUrl) {
        cleanupBlobUrl(pdfUrl);
      }
    };
  }, [pdfUrl, initialUrl]);
  
  return {
    pdfUrl,
    isLoading,
    error,
    reload: () => loadPdf(initialUrl)
  };
};
